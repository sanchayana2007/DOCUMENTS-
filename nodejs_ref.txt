Installation in Windows:
++++++++++++++++++++++++++++++
1) visit 
https://nodejs.org/
 and dowload the latest msi files for windows 
 
2) Install the msi 
It will have Node Package Manager which will helpful in intalling modules 
 // If the package has a dependency on other modules then it will load the latest version for a specific version 
// we have to take k r of the version
npm install colors
npm http GET https://registry.npmjs.org/colors
npm http 200 https://registry.npmjs.org/colors
colors@0.6.2 node_modules\colors

the colors will be installed at the same path where the npm is run in a folder named npm_module


 Binding a Package Installed using Json to your Node.js Module
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
A Json script will be used to maintian the Initiation , dependecies and Licencing 



The requisite of the json script will be checked on giving the installation by NPM
npm install

{
	"name":  "my-colors-project", 
	"version": "0.6.2",
	"main": "./index" ,
	"description": "This will install the color package",
	"readme": "Install the color package ", 
	"dependencies": { "colors" : "0.6.2"}
}
 




Variables:
++++++++++++++++++++++++++++++++
The type of the variables are will be declared as 'var'
var pathname = url.parse(request.url).pathname 


CREATING A BUFFER
++++++++++++++++++++++++++++++++++

Because Node is based on JavaScript, Node can handle text protocols like HTTP, but you can
also use it to talk to databases, manipulate images, and handle fi le uploads. As you can
imagine, doing this using only strings is very difficult.
Node includes a binary buffer
implementation, which is exposed as a JavaScript API under the Buffer pseudo-class. A buffer
length is specifi ed in bytes, and you can randomly set and get bytes from a buffer.

Ex:
var buf = new Buffer('hello world', 'base64');
// Gettig and Setting of the buffer
for(var i = 0; i < buf.length; i++) {
buf[i] = i;	
console.log()buf[i];
}	



Accepted encodings and their identifi ers are:
==============================================
➤ ascii— ASCII.
➤ utf8—UTF-8. This is a variable width encoding that can represent every character in the
Unicode character set. This is the default encoding if you don’t specify one.
➤ base64—Base64. This encoding is used to represent binary data in an ASCII string format
by translating it into a radix-64 representation. Base64 is commonly used to embed binary
data into textual documents in a way that ensures that the data remains intact during
transport.

//Splicing Buffer:

var smallbuf = buf.slice(6,5) // smallbuf = World

COPYING A BUFFER
=================
You can also copy part of a buffer into another buffer by using the copy method like this:

	var buffer1 = new Buffer("this is the content of my buffer");
	var buffer2 = new Buffer(11);
	var targetStart = 0;
	var sourceStart = 8;
	var sourceEnd = 19;
	buffer1.copy(buffer2, targetStart, sourceStart, sourceEnd);
	console.log(buffer2.toString()); // -> "the content"
Here, you are copying position 8 to 19 of the source buffer into position 0 of the target buffer

Decoding a Buffer:
===================
	var utf8String = 'my string';
	var buf = new Buffer(utf8String);
	var base64String = buf.toString('base64')




Functions:
+++++++++++++++++++++++++++++++++
Function definition start function keyword and the arguments are taken from the type passed on while calling 
function start(route) {
//In this case route is a function name from another module.
//This route function argument can be passed in the code or at the calling point only 
route(pathname)


}

//calling 
start(router.route)



Functions declaration Inside functions:
+++++++++++++++++++++++++++++++++++++++++

function test(Request,response)
{
// New function call
	function test1(permissions)
	{
		permission("print my line") 
	}
}

Single Line calls 
++++++++++++++++++++++++++++++++++++++++++++
var express     = require("express");
var app         = express();

The above two lines can be combined into 
var app = require("express")();




Exporting functions
+++++++++++++++++++++++++++++++++++
The functions are pretty much exported so that other files(modules)can use its  functionalities which will
import the  module containing the function 

exports.start = start;

Class
++++++++++++++++++++++++++++++++++++
Class pattern is basically a function which is used to declare all its variables which are private to the class
using the this keyword 

//Declaration of the variables of the class
var bar = 'None';
var total = 0;


// Constructor
function Foo(bar) {
  // always initialize all instance properties
  this.bar = bar;
  this.baz = 'baz'; // default value
}

// class methods are basically set up with the keyword prototype and the Method name  associated with class
// returning or setting  any variable by a method will make it public

Foo.prototype.fooBar = function() 
{
 	return Total;
};


// export the class

module.exports = Foo;

//Instantiating a class is simple:
// constructor call

var object = new Foo('Hello');

Note that I recommend using function Foo() { ... } for constructors instead of var Foo = function() { ... }.
The main benefit is that you get better stack traces from Node when you use a named function.
Generating a stack trace from an object with an unnamed constructor function.

Prototype is only used for intialisng the methods as this is static to a class 
if any varible is intialise all the objects of the class will show up the changed variable.

Inherting from Class and Overidding its functions:
+++++++++++++++++++++++++++++++++++++++++++++++++++++
//Class Animal Constructor is declared with a name 

function Animal(name) 
{
  this.name = name;
};

// class Animal has a method name as move 
Animal.prototype.move = function(meters) 
{
  console.log(this.name+" moved "+meters+"m.");
};

// Class Snake is a Subclass of the Animal class 
function Snake() 
{
  Animal.apply(this, Array.prototype.slice.call(arguments));
};
Snake.prototype = new Animal();

Snake.prototype.move = function() 
{
  console.log("Slithering...");
  Animal.prototype.move.call(this, 5);
};

var sam = new Snake("Sammy Python");
sam.move();


o/p :Sammy the Python moved 5m."


Loading or Importing Modules 
++++++++++++++++++++++++++++++++++++++++++++++++++++++
The loading of the module is generally done by the use of a functiom 
"require(module name)" // for a core module 

The require function returns
an object that represents the JavaScript API exposed by the module. Depending on the module, that
object can be any JavaScript value — 
a function,
an object with some properties that can be functions, 
an array, 
or any other type of JavaScript object.

Core Module 
==============
var http = require('module name');

Defined Module
===============

File Module :
	var myModule = require('./FileName'); 
		or 
	var myModule = require('C:/FileName'); 
Folder module :
	For Folder Module the file should be present in package.json inside the folder , ifnot present 
	node will look for the index.js inside the folder 
	var myModule = require('./FolderName'); 
	
Ex:

For
instance, if your ./myModuleDir/package.json fi le looks something like the following, Node will
try to load the fi le with the path./myModuleDir/lib/myModule.js:
{
"name" : "myModule",
"main" : "./lib/myModule.js"
}

Now if we want not to load the module but just find the module and give us back the file name back so using the resolve 
will neverload a Module and a function defined in that module will get 

require.resolve()

Error: require.paths is removed. Use node_modules folders, or the NODE_PATH envi
ronment variable instead.


For putting a search path when a loading up an module (TBC)
require.paths.unshift('/usr/local/node');

Error: require.paths is removed. Use node_modules folders, or the NODE_PATH envi
ronment variable instead.

Exporting a Module :
+++++++++++++++++++++
this is done by the module.exports keyword used at the end of the file having the Module 

Ex:
	function Sum(x,y){
	
		function Plus(){ 
			return x + r;
		}
		
		return{
		Plus= Plus();
		}
	}
		module.exports= Sum;
	// for Multiple classes ofr functions multiple callls should be used 	
So over here the Sum module will Plus two Numbers and it is Imported like this 

var sum = require('./Sum');
var result = sum.Sum(2,3);




Event based or  asynchronous or Call back functions
++++++++++++++++++++++++++++++++++++++++++++++

The Event based Approach is an alternative for a Multihreaded approach, This style of programming means the
current process will not block when it is doing I/O. Therefore, several I/O operations can occur in
parallel, and each respective callback function will be invoked when the operation fi nishes.
This is achieved by the use of Event Loop , which determines which events has just occured and then they 
can engage the callback associated with that Event .

event loop is just one thread running inside one process, which means that, when an event happens,
the event handler can run without interruption. This means the following:
➤ There is at most one event handler running at any given time.
➤ Any event handler will run to completion without being interrupted.
This allows the programmer to relax the synchronization requirements and not have to worry about
concurrent threads of execution changing the shared memory state.
> Less Context Switching 

Ex:

'SELECT * FROM posts WHERE id = 1'
This query requires that the current thread or process wait until the database layer fi nishes processing
it.
In event-driven systems, this query would be performed in this way:
query_finished = function(result) {
do_something_with(result);
}
query('SELECT * FROM posts WHERE id = 1', query_finished);
Here you are fi rst defi ning what will happen when the query is fi nished and storing that in a
function named query_finished. Then you are passing that function as an argument to the query.
When it’s fi nished, the query will invoke the query_finished function, instead of simply returning
the result.
This style of programming means the
current process will not block when it is doing I/O. Therefore, several I/O operations can occur in
parallel, and each respective callback function will be invoked when the operation fi nishes.
The event-driven programming style is accompanied by an event loop. An event loop is a
construct that mainly performs two functions in a continuous loop — event detection and event
handler triggering

Closures:
+++++++++++++++++++++++++++++++++++++++++++++++++++++++
Closures are functions that inherit variables from their enclosing environment. When you pass a
function callback as an argument to another function that will do I/O, this callback function will
be invoked later, and this function will — almost magically — remember the context in which it
was declared, along with all the variables available in that context and any parent contexts. This
powerful feature is at the heart of Node’s success

Ex: 
var clickCount = 0;
document.getElementById('myButton').onclick = function() {
clickCount += 1;
alert("clicked " + clickCount + " times.");
};

functions are first-class objects, which means you can pass functions as arguments to
other functions and it remembers from enclosing enviroment clickCount .
So here the Function will act as a callback when their is an click event and then this function will
call up the objects.
Now the click count will be inherited by the function , Now Suppose you in some other scope 
you want 

document.getElementById('myButton').onclick; 

This should automatically call the Event Handler callback function and use the clickcount variable.




Using EventEmitters
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

The Event Emitters can have trigger out an  Event 


Like a  TCP server can emit a 
>“connect” event every time a new client connects, 
or a file stream can emit a 
>“data” event every time a newchunk of data is read. 

These objects are, in Node nomenclature, event emitters. Asynchronous programming does not use function
return values to denote that a function is finished. Instead it uses the continuation-passing style (CPS):
Continuation-passing style (CPS) is a style of programming in which control is passed explicitly in the 
form of a continuation. (…)A function written in continuation-passing style takes as an extra argument
an explicit “continuation,” that is, a function of one argument.
Event emitterrs allow programmers to subscribe to events they are interested in. The programmer attaches a
callback function that will be invoked every time a relevant event in that event emitter occurs. This 
publisher/subscriber pattern is very similar to the typical GUI pattern, whereby a program gets notified
that a certain button was clicked. By using this pattern, a server-side program can react when, for 
instance, a client connects to the server, data is available on a socket, or a file gets closed.

Use of Standard callBack pattern : (To handle One event emission )
------------------------------------------------------------------
var fs = require('fs');

fs.readFile('/etc/passwd', function(err, fileContent) {
if (err) {
throw err;
}
console.log('file content', fileContent.toString());
});


Here, you are passing an anonymous inline function as the second argument of the fs.readFile function, 
and you’re making use of the CPS, because you are continuing the execution of the program inside that 
function.
As you can see here, the fi rst argument to the callback function is an error object, which will have an
instance of the Error class if an error occurs. This is a common pattern in Node when using CPS.

Use of Event Emitter pattern : (To handle Multiple event emissions or Multiple Times)
--------------------------------------------------------------------------------------

Node.js implements the observer pattern using a class called EventEmitter. Whenever there is an object
that represents the source of several kinds of events, node.js usually makes the underlaying class inherit 
from EventEmitter.

Using EventEmitter's is pretty straight-forward. You can listen to a specific event by calling the 'on()' function 
on your object, providing the name of the event, as well as a callback closure as the parameters. For example:


var data = '';
	req.on('data', function(chunk) {
    		data += chunk;
  	})
  	req.on('end', function() {
		 console.log('POST data: %s', data);
  	})
  	
As you can see, the on() function also returns a reference to the object it belongs to, allowing you to chain several
of such event listeners.
Here the on the first Line a Callback is registered for a request is received against any of the (data,end)Events
and then Event Listeners are registered for  handling the that  events UP. 


Default Event Emitted will be Error Event If Your Callback 1st argument is an Event Emitter

API From Event Emitter Module in Node:
---------------------------------------

1) .addListner or .on 
--------------------
To add an event listener to an event type 

function receiveData(data) 
{
	console.log("got data from file read stream: %j", data);
}

readStream.addListener(“data”, receiveData); // receivedata could have been declared here also 

		OR 
readStream.on(“data”, receiveData); // receivedata could have been declared here also

Multiple Event and Listning to them 



Reference to Function and Values:
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

var one = function() { mike.showName(); };
var two = mike.showName;
var three = mike.showName();
var four = (function() { mike.showName(); })();
The first two assign a reference to a function to their respective variables. The last two, however, call functions (that's what the parens are for) and assign their return values to the vars on the left-hand side.

http://nodejs.org/docs/v0.4.4/api/globals.html

Timers
+++++++++++++++++++++++++++++++++++++++++++++++++++++++

setTimeout(callback, delay, [arg], [...])



