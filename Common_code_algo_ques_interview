Complexity 	Name 				Examples, Comments
Θ(1) 		Constant 			Hash table lookup and modification (see black box sidebar on dict).
Θ(lg n) 	Logarithmic 		Binary search  	Logarithm base unimportant.
Θ(n) 		Linear 				Iterating over a list.
Θ(n lg n) 	Loglinear 			Optimal sorting of arbitrary values 
Θ(n2) 		Quadratic 			Comparing n objects to each other 
Θ(n3) 		Cubic Floyd and Warshall’s 	algorithms 
O(nk) 		Polynomial 			k nested for loops over n (if k is pos. integer). For any constant k > 0.
Ω(kn) 		Exponential 			Producing every subset of n items (k = 2; see Chapter 3). Any k > 1.
Θ(n!) 		Factorial 			Producing every ordering of n values. 
----------------------------------------------------------------------------------------------------------------------------
# palinderome:
Python : 
----------------------------------------------------------------------------------------
def palindrome(num):
    return num == num[::-1]
    
C++
----------------------------------------------------------------------------------------
bool palindrome(string *str)
{	
	string temp(*str);
	size_t len = temp.length();
	for(int i = 0;i <=len/2;len++){
		if (str[i] != temp(len))
		{	
			return false;
		}
			i++; len--;
	}
}


#Count vowels in a string
---------------------------------------------------------------------------------------
 Program to count the number of each vowel in a string
# string of vowels
vowels = 'aeiou'

# take input from the user
ip_str = input("Enter a string:")

# make it suitable for caseless comparisions
ip_str = ip_str.casefold()

# make a dictionary with each vowel a key and value 0
count = {}.fromkeys(vowels,0)

# count the vowels
for char in ip_str:
   if char in count:
       count[char] += 1

print(count)
Output


Enter a string: Hello, have you tried our turorial section yet?
{'e': 5, 'u': 3, 'o': 5, 'a': 2, 'i': 3}


lower = int(input("Enter lower range: "))
upper = int(input("Enter upper range: "))

for num in range(lower,upper + 1):
   # prime numbers are greater than 1
   if num > 1:
       for i in range(2,num):
           if (num % i) == 0:
               break
       else:
           print(num)
----------------------------------------------------------------------------------------           
           
 # Program to generate a random number between 0 and 9

# import the random module
import random

print(random.randint(0,9))



# Python program to shuffle a deck of card using the module random and draw 5 cards

# import modules
import itertools, random

# make a deck of cards
deck = list(itertools.product(range(1,14),['Spade','Heart','Diamond','Club']))

# shuffle the cards
random.shuffle(deck)

# draw five cards
print("You got:")
for i in range(5):
   print(deck[i][0], "of", deck[i][1])
   



# Python program to find the factorial of a number provided by the user.

# take input from the user
num = int(input("Enter a number: "))
factorial = 1

# check if the number is negative, positive or zero
if num < 0:
   print("Sorry, factorial does not exist for negative numbers")
elif num == 0:
   print("The factorial of 0 is 1")
else:
   for i in range(1,num + 1):
       factorial = factorial*i
   print("The factorial of",num,"is",factorial)
   
   
   
 # Program to add two matrices
# using list comprehension

X = [[12,7,3],
    [4 ,5,6],
    [7 ,8,9]]

Y = [[5,8,1],
    [6,7,3],
    [4,5,9]]

result = [[X[i][j] + Y[i][j]  for j in range(len(X[0]))] for i in range(len(X))]

for r in result:
   print(r)

# revesere a Number 
Python : 
----------------------------------------------------------------------------------------

C++
----------------------------------------------------------------------------------------



# reverse a string
Python : 
----------------------------------------------------------------------------------------

C++
----------------------------------------------------------------------------------------



# fibonacci 
Python : 
----------------------------------------------------------------------------------------

C++
----------------------------------------------------------------------------------------


#Swap two Numbers:
Python : 
----------------------------------------------------------------------------------------

C++
----------------------------------------------------------------------------------------



#Sorting Algos :
Python : 


 sorting by the first item in each sub-list:
 ==========================================================
>>> def getKey(item):
...     return item[0]
>>> l = [[2, 3], [6, 7], [3, 34], [24, 64], [1, 43]]
>>> sorted(l, key=getKey)
[[1, 43], [2, 3], [3, 34], [6, 7], [24, 64]]

Lsts do it in descending style
sorted(l, reverse=True)

Sorting a List (or Tuple) of Custom Python Objects:
=========     =================    =================
class Custom(object):
    def __init__(self, name, number):
        self.name = name
        self.number = number
#*** This repr is exclusively written to how th e out put of the class in our specific format 		
	def __repr__(self):
       return '{}: {} {}'.format(self.__class__.__name__, self.name, self.number)

Lets enter our List 
customlist = [ Custom('object', 99), Custom('michael', 1),Custom('theodore the great', 59),Custom('life', 42)]

def getKey(custom):
    return custom.number

>>> sorted(customlist, key=getKey)
[Custom: michael 1, Custom: life 42,
 Custom: theodore the great 59, Custom: object 99]	
 
 Now again lets generalise the sorter by removing the key just definee the __cmp__ function 
 def __cmp__(self, other):
        if hasattr(other, 'number'):
            return self.number.__cmp__(other.number)
			
>>> sorted(customlist, key=getKey)
[Custom: michael 1, Custom: life 42,x Custom: theodore the great 59, Custom: object 99]	

If the comparision is heterogenos then we have to use the get the getkey in all classea and we should compare 
the get key 
def __cmp__(self, other):
        if hasattr(other, 'getKey'):
            return self.getKey().__cmp__(other.getKey())
 
def getKey(self):
    return self.age
----------------------------------------------------------------------------------------


The Difference Between xrange and range in Python
-------------------------------------------------------------------------
Before we get started, let's talk about what makes xrange and range different.

For the most part, xrange and range are the exact same in terms of functionality. They both provide a way to generate a 
list of integers for you to use, however you please. The only difference is that range returns a Python list object and
 xrange returns an xrange object.
What does that mean? Good question! It means that xrange doesn't actually generate a static list at run-time like range does.
 It creates the values as you need them with a special technique called yielding. This technique is used with a type of object
 known as generators. If you want to read more in depth about generators and the yield keyword

 Python's xrange and range with Odd Numbers

Say we wanted only odd numbers. Here's what we could do:
>>> for i in xrange(1, 10, 2):
...     print(i)
...
1
3
5
7
9
We told Python that we would like the first element to be one, the last element to be one less than ten, 
and that we'd like each element to go up by two. Really simple stuff.

Python's xrange and range with Negative Numbers

Alright, so what about if we want a negative list?Simple. Here's an example:
>>> for i in xrange(-1, -10, -1):
...     print(i)
...
-1
-2
-3
-4
-5
-6
-7
-8
-9


Using various python modules convert the list a to generate the output ‘one, two, three’

a = ['one', 'two', 'three']
Ans:   ", ".join(a)

What would the following code yield?
word = 'abcdefghij'
print word[:3] + word[3:]

Ans: ‘abcdefghij’ will be printed.
This is called string slicing. Since here the indices of the two slices are colliding, the string slices 
are ‘abc’ and ‘defghij’. The ‘+’ operator on strings concatenates them. Thus, the two slices formed are concatenated
to give the answer ‘abcdefghij’.

 exchanging numbers is as easy as:
a,b = b,a

Iterate over a list of words and use a dictionary to keep track of the frequency(count) of each word. for example

{‘one’:2, ‘two’:2, ‘three’:2}

Ans:

def dic(words):
  a = {}
  for i in words:
    try:
      a[i] += 1
    except KeyError: ## the famous pythonic way:
      a[i] = 1       ## Halt and catch fire
  return a
  
  
Print the sum of digits of numbers starting from 1 to 100 (inclusive of both)

Ans:

print sum(range(1,101))


one more example of even numbers between 100 and 120:
>>> for i in xrange(100, 120, 2):
...     print(i)
...
100
102
104
106
108
110






C++
----------------------------------------------------------------------------------------


# Tree:
Python : 
----------------------------------------------------------------------------------------

C++
----------------------------------------------------------------------------------------

#Graph:
Python : 
----------------------------------------------------------------------------------------

C++
----------------------------------------------------------------------------------------








// test_code.cpp : Defines the entry point for the console application.
//
#include "stdafx.h"
#include<iostream>
#include<conio.h>
using namespace std;





/*
Sample input:
6
1 1 2 2 3 4
Sample output:
4
Explanation:
The distinct triplets are
(1,2,3)
(1,2,4)
(1,3,4)
(2,3,4)

*/
void ascending_tripletes_all(int a[], int sizea)
{
	int triple[3];
	int j =0;int k =0;
	int flag=0;
	for(int k=0;k < 3;k++)
	{
		triple[k]=0;
	}
		
	for(int i=0; i<sizea ; i++)
	{
		if (a[i] == a[i+1])
			continue;
		for(int j=i+1; j < sizea; j++)
		{
			if (a[j] == a[j+1])
				continue;
			for(int k=j+1;k < sizea; k++)
			{
				if (a[k] == a[k+1])
					continue;
				//cout<<"count" << i << j << k << "members"<< a[i] << a[j] << a[k]<< endl;
				if(a[i]<a[j] && a[j] < a[k]){
					//cout<<a[i]<<a[j]<<a[j+1] <<endl;
					triple[0] = a[i];
					triple[1] = a[j];
					triple[2] = a[k];
				 cout<< triple[0] << triple[1] << triple [2] << endl;
				}
			}
		}

	}
}

/*

Input = a= {1,1,2,3,6,5}
O/p=> {1,2,3,5,6}
for a array with duplicate elements arange in ascending order
*/



int * sort_Numbers(int a[], int size)
{
	int m =0;
	int c[5]={0};
	int k =0;
	for(int i=0; i< size && m < 4 ;)
	{
		for(int j=i+1; j < size ; j++)
		{
			if(a[i]== a[j])
			{
				//cout <<"Elmenets";
				i++;
				continue;
			
			}
			else
			{
			   //cout<< "i" << a[i]<<endl;				
				c[m++]= a[i++];
				/*Not sure why the c[m] is showing 0*/
				//cout<<"c"<<c[m]<<m <<endl;		
			}
		}
	}

	int *Newarry = (int*) malloc(sizeof(int)*m);
	for(int l=0; l < m; l++)
	{
		Newarry[l] = c[l];
		cout<<Newarry[l]<<endl;
	}
	cout<<endl;

//arange the array in Increasing order
		
	for(int i=0; i<m; i++)
	{
		for(int j=0; j < m; j++)
		{
			if(Newarry[i] < Newarry[j])
			{
				cout<<"Swap"<<Newarry[i]<<Newarry[j]<<endl;
				k = Newarry[i];
				Newarry[i]=Newarry[j];
				Newarry[j]=k;
			}
			
		}
	}

	for(int l=0; l < m; l++)
	{
		
		cout<<Newarry[l];

	}
	 cout<<endl;
	return Newarry;

}


/*
array a={1,2,4,6,3,8}
O/p: {2,1,6,4,8,3}

Exchange the pair of Numbers to form the largest possible Number which can be formed

*/



int * maximize(int a[], int size)
{

	for(int i=0; i<size ; i++)
	{
		if((a[i] < a[i+1]) && (i%2==0))
		{
			int temp = a[i];
			a[i] = a[i+1];
			a[i+1] = temp;
		}

	}
		return a;

}


/*
Postional array reversal 
 linked list: 1 -> 2 -> 3-> 4-> 5-> 6 reverse the list each N nodes. eg. if N = 3 the output should 
 be 3-> 2-> 1-> 6-> 5-> 4. Also provide a mechanism to prevent errors. For the same example, if N = 4,
 the result should be: 4-> 3-> 2-> 1-> 5-> 6 (The last two nodes can't be reversed)
 */

class Llist{
				int data;
				llist *ptr;
public:
		Llist( )


};
void Link-revr-pos(int a[],int size)
{
	

}


int main()
{

	int a[6]= {1,1,4,2,3,4};
	
	//ascending_tripletes_all(a,6);
	//int *c = maximize(a,6);
	//int *c  = sort_Numbers(a,6);



	
	for(int i=0; i<4 ;i++)
	{
		cout<<c[i];
	}
	getch();

}

a simple example of complexity calculation:
s = 0
for x in seq:
for y in seq:
s += x*y
for z in seq:
for w in seq:
s += x-w

It may not be entirely clear what we’re computing here (I certainly have no idea), but we should still
be able to find the running time, using our rules. The z-loop is run for a linear number of iterations, and
it contains a linear loop, so the total complexity there is quadratic, or Θ(n2). The y-loop is clearly Θ(n).
This means that the code block inside the x-loop is Θ(n + n2). This entire block is executed for each
round of the x-loop, which is run n times. We use our multiplication rule and get Θ(n(n + n2)) = Θ(n2 + n3)
= Θ(n3), that is, cubic. We could arrive at this conclusion even more easily by noting that the y-loop is
dominated by the z-loop and can be ignored, giving the inner block a quadratic running time.
“Quadratic times linear” gives us cubic.


Consider the following two ways of looking for an element in a list:
>>> from random import randrange
>>> L = [randrange(10000) for i in range(1000)]
>>> 42 in L
False
>>> S = set(L)
>>> 42 in S
False
They’re both pretty fast, and it might seem pointless to create a set from the list—unnecessary work,
right? Well, it depends. If you’re going to do many membership checks, it might pay off, because
membership checks are linear for lists and constant for sets. What if, for example, you were to gradually
add values to a collection and for each step check whether the value was already added? This is a
situation you’ll encounter repeatedly throughout the book. Using a list would give you quadratic
running time, whereas using a set would be linear. A huge difference.


The first lesson here is to never compare floats for equality. It generally doesn’t make sense. Still, in
many applications (such as computational geometry), you’d very much like to do just that. Instead, you
should check whether they are approximately equal. For example, you could take the approach of
assertAlmostEqual from the unittest module:
>>> def almost_equal(x, y, places=7):
... return round(abs(x-y), places) == 0
...
>>> almost_equal(sum(0.1 for i in range(10)), 1.0)
True




the “obvious” way of gradually building a string:
>>> s = ""
>>> for chunk in input():
... s += chunk
It works, and because of some really clever optimizations in Python, it actually works pretty well, up
to a certain size—but then the optimizations break down, and you run smack into quadratic growth. The
problem is that (without the optimizations) you need to create a new string for every += operation,
copying the contents of the previous one. You’ll see a detailed discussion of why this sort of thing is
quadratic in the next chapter, but for now, just be aware that this is risky business. A better solution
would be the following:
>>> chunks = []
>>> for chunk in input():
... chunks.append(chunk)
...
>>> s = ''.join(chunks)


For sorting Algos :
The best case. This is the running time you get when the input is optimally suited
to your algorithm. For example, if the input sequence to sort_w_check were sorted,
we would get the best-case running time (which would be linear).
• The worst case. This is usually the most useful case—the worst possible running
time. This is useful because we normally want to be able to give some guarantees
about the efficiency of our algorithm, and this is the best guarantee we can give in
general.
• The average case. This is a tricky one, and I’ll avoid it most of the time, but in
some cases it can be useful. Simply put, it’s the expected value of the running
time, for random input (with a given probability distribution).

hasing in Python:
Hashing involves computing some (often seemingly random) integer value from
an arbitrary object. This value can then be used, for example, as an index into an array (subject to some
adjustments to make it fit the index range).
The standard hashing mechanism in Python is available through the hash function:
>>> hash(42)
42
>>> hash("Hello, world!")
-1886531940
This is the mechanism that is used in dictionaries, which are implemented using so-called hash tables.
Sets are implemented using the same mechanism. The important thing is that the hash value can be
constructed in essentially constant time (it’s constant with respect to the hash table size but linear as a
function of the size of the object being hashed).

THE BUNCH PATTERN
When prototyping (or even finalizing) data structures such as trees, it can be useful to have a flexible class
that will allow you to specify arbitrary attributes in the constructor. In these cases, the “Bunch” pattern
(named by Alex Martelli in the Python Cookbook) can come in handy. There are many ways of
implementing it, but the gist of it is the following:
class Bunch(dict):
def __init__(self, *args, **kwds):
super(Bunch, self).__init__(*args, **kwds)
self.__dict__ = self
There are several useful aspects to this pattern. First, it lets you create and set arbitrary attributes by
supplying them as command-line arguments:
>>> x = Bunch(name="Jayne Cobb", position="Public Relations")
>>> x.name
'Jayne Cobb'
Second, by subclassing dict, you get lots of functionality for free, such as iterating over the keys/attributes
or easily checking whether an attribute is present. Here’s an example:
>>> T = Bunch
>>> t = T(left=T(left="a", right="b"), right=T(left="c"))
>>> t.left
{'right': 'b', 'left': 'a'}
>>> t.left.right
'b'
>>> t['left']['right']
'b'
>>> "left" in t.right
True
>>> "right" in t.right
False
This pattern isn’t useful only when building trees, of course.

We have a constant amount of work in each execution of rec_sum, excluding the recursive call, and it’s
executed once for each item in the sequence, so it’s pretty obvious that the running time is linear. Still,
let’s look into it:
def T(seq, i=0):
if i == len(seq): return 1
return T(seq, i+1) + 1
This new T function has virtually the same structure as S, but the values it’s working with are
different. Instead of returning a solution to a subproblem, like S does, it returns the cost of finding that
solution. In this case, I’ve just counted the number of times the if statement is executed. (In a more
mathematical setting, you would count any relevant operations and use Θ(1) instead of 1, for example.)
Let’s take these two functions out for a spin:
>>> seq = range(1,101)
>>> S(seq)
5050
What do you know, Gauss was right! Let’s look at the running time:
>>> T(seq)
101
Looks about right. Here, the size n is 100, so this is n+1. It seems like this should hold in general:
>>> for n in range(100):
... seq = range(n)
... assert T(seq) == n+1
There are no errors, so the hypothesis does seem sort of plausible.
What we’re going to work on now is how to find nonrecursive versions of functions such as T, giving
us definite running time complexities for recursive algorithms.
+++++++++++++++++++++++++++++++++++++++++++++ Hackerranks=======================================================================

__author__ = 'Sanchayan'
# coding: iso-8859-1
#Given N integers, count the number of pairs of integers whose difference is K.
def hr_8_31_15():
    '''Complexity:
        time complexity is O(N*log(N))
        space complexity is O(N)
    '''
    a = [1.2,3,4.5,5,6]
    b = map(int,a)
    #Actually this steps make tghe search as logn time as of tree
    c= set(b)
    print (b)# At this point Map object b which a Iterator which comes from generators is exhausted
    for i in b:
        print(i)
    print(pairs(c,2))

def pairs(a,k):
    answer =0
    for v in a:
        # here the search in the Tree takes palce so N.LogN time
        if v+k in a:
            answer+=1
    return answer
# coding: iso-8859-1
'''Given two strings a and b of equal length, whats the longest string (S) that can be constructed such that it is a child of both?
A string x is said to be a child of a string y if x can be formed by deleting 0 or more characters from y.'''
def hr_8_30_15():
    # check Single element from the first in second if matches check the next one and on till match ends
    temp = a = 'abcdef'
    b = 'ghideg'
    index =0
    while True:
        print(temp)
        itm = temp[index]
        if b.find(itm)> -1:
            for 
            break
        elif index == len(temp):
            print('ddd')
            break
        index = index+1
        temp = temp[index:]
    #
    # print(temp)
    return  temp
if  __name__ == '__main__':
    #hr_8_31_15()
    print(hr_8_30_15())