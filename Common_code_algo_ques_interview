Complexity 	Name 				Examples, Comments
Θ(1) 		Constant 			Hash table lookup and modification (see black box sidebar on dict).
Θ(lg n) 	Logarithmic Binary search  	Logarithm base unimportant.
Θ(n) 		Linear 				Iterating over a list.
Θ(n lg n) 	Loglinear 			Optimal sorting of arbitrary values 
Θ(n2) 		Quadratic 			Comparing n objects to each other 
Θ(n3) 		Cubic Floyd and Warshall’s 	algorithms 
O(nk) 		Polynomial 			k nested for loops over n (if k is pos. integer). For any constant k > 0.
Ω(kn) 		Exponential 			Producing every subset of n items (k = 2; see Chapter 3). Any k > 1.
Θ(n!) 		Factorial 			Producing every ordering of n values. 
----------------------------------------------------------------------------------------------------------------------------
# palinderome:
Python : 
----------------------------------------------------------------------------------------
def palindrome(num):
    return num == num[::-1]
    
C++
----------------------------------------------------------------------------------------
bool palindrome(string *str)
{	
	string temp(*str);
	size_t len = temp.length();
	for(int i = 0;i <=len/2;len++){
		if (str[i] != temp(len))
		{	
			return false;
		}
			i++; len--;
	}
}


#Count vowels in a string
---------------------------------------------------------------------------------------
 Program to count the number of each vowel in a string
# string of vowels
vowels = 'aeiou'

# take input from the user
ip_str = input("Enter a string: ")

# make it suitable for caseless comparisions
ip_str = ip_str.casefold()

# make a dictionary with each vowel a key and value 0
count = {}.fromkeys(vowels,0)

# count the vowels
for char in ip_str:
   if char in count:
       count[char] += 1

print(count)
Output


Enter a string: Hello, have you tried our turorial section yet?
{'e': 5, 'u': 3, 'o': 5, 'a': 2, 'i': 3}


lower = int(input("Enter lower range: "))
upper = int(input("Enter upper range: "))

for num in range(lower,upper + 1):
   # prime numbers are greater than 1
   if num > 1:
       for i in range(2,num):
           if (num % i) == 0:
               break
       else:
           print(num)
----------------------------------------------------------------------------------------           
           
 # Program to generate a random number between 0 and 9

# import the random module
import random

print(random.randint(0,9))



# Python program to shuffle a deck of card using the module random and draw 5 cards

# import modules
import itertools, random

# make a deck of cards
deck = list(itertools.product(range(1,14),['Spade','Heart','Diamond','Club']))

# shuffle the cards
random.shuffle(deck)

# draw five cards
print("You got:")
for i in range(5):
   print(deck[i][0], "of", deck[i][1])
   



# Python program to find the factorial of a number provided by the user.

# take input from the user
num = int(input("Enter a number: "))
factorial = 1

# check if the number is negative, positive or zero
if num < 0:
   print("Sorry, factorial does not exist for negative numbers")
elif num == 0:
   print("The factorial of 0 is 1")
else:
   for i in range(1,num + 1):
       factorial = factorial*i
   print("The factorial of",num,"is",factorial)
   
   
   
 # Program to add two matrices
# using list comprehension

X = [[12,7,3],
    [4 ,5,6],
    [7 ,8,9]]

Y = [[5,8,1],
    [6,7,3],
    [4,5,9]]

result = [[X[i][j] + Y[i][j]  for j in range(len(X[0]))] for i in range(len(X))]

for r in result:
   print(r)

# revesere a Number 
Python : 
----------------------------------------------------------------------------------------

C++
----------------------------------------------------------------------------------------



# reverse a string
Python : 
----------------------------------------------------------------------------------------

C++
----------------------------------------------------------------------------------------



# fibonacci 
Python : 
----------------------------------------------------------------------------------------

C++
----------------------------------------------------------------------------------------


#Swap two Numbers:
Python : 
----------------------------------------------------------------------------------------

C++
----------------------------------------------------------------------------------------



#Sorting Algos :
Python : 
----------------------------------------------------------------------------------------

C++
----------------------------------------------------------------------------------------


# Tree:
Python : 
----------------------------------------------------------------------------------------

C++
----------------------------------------------------------------------------------------

#Graph:
Python : 
----------------------------------------------------------------------------------------

C++
----------------------------------------------------------------------------------------








// test_code.cpp : Defines the entry point for the console application.
//
#include "stdafx.h"
#include<iostream>
#include<conio.h>
using namespace std;





/*
Sample input:
6
1 1 2 2 3 4
Sample output:
4
Explanation:
The distinct triplets are
(1,2,3)
(1,2,4)
(1,3,4)
(2,3,4)

*/
void ascending_tripletes_all(int a[], int sizea)
{
	int triple[3];
	int j =0;int k =0;
	int flag=0;
	for(int k=0;k < 3;k++)
	{
		triple[k]=0;
	}
		
	for(int i=0; i<sizea ; i++)
	{
		if (a[i] == a[i+1])
			continue;
		for(int j=i+1; j < sizea; j++)
		{
			if (a[j] == a[j+1])
				continue;
			for(int k=j+1;k < sizea; k++)
			{
				if (a[k] == a[k+1])
					continue;
				//cout<<"count" << i << j << k << "members"<< a[i] << a[j] << a[k]<< endl;
				if(a[i]<a[j] && a[j] < a[k]){
					//cout<<a[i]<<a[j]<<a[j+1] <<endl;
					triple[0] = a[i];
					triple[1] = a[j];
					triple[2] = a[k];
				 cout<< triple[0] << triple[1] << triple [2] << endl;
				}
			}
		}

	}
}

/*

Input = a= {1,1,2,3,6,5}
O/p=> {1,2,3,5,6}
for a array with duplicate elements arange in ascending order
*/



int * sort_Numbers(int a[], int size)
{
	int m =0;
	int c[5]={0};
	int k =0;
	for(int i=0; i< size && m < 4 ;)
	{
		for(int j=i+1; j < size ; j++)
		{
			if(a[i]== a[j])
			{
				//cout <<"Elmenets";
				i++;
				continue;
			
			}
			else
			{
			   //cout<< "i" << a[i]<<endl;				
				c[m++]= a[i++];
				/*Not sure why the c[m] is showing 0*/
				//cout<<"c"<<c[m]<<m <<endl;		
			}
		}
	}

	int *Newarry = (int*) malloc(sizeof(int)*m);
	for(int l=0; l < m; l++)
	{
		Newarry[l] = c[l];
		cout<<Newarry[l]<<endl;
	}
	cout<<endl;

//arange the array in Increasing order
		
	for(int i=0; i<m; i++)
	{
		for(int j=0; j < m; j++)
		{
			if(Newarry[i] < Newarry[j])
			{
				cout<<"Swap"<<Newarry[i]<<Newarry[j]<<endl;
				k = Newarry[i];
				Newarry[i]=Newarry[j];
				Newarry[j]=k;
			}
			
		}
	}

	for(int l=0; l < m; l++)
	{
		
		cout<<Newarry[l];

	}
	 cout<<endl;
	return Newarry;

}


/*
array a={1,2,4,6,3,8}
O/p: {2,1,6,4,8,3}

Exchange the pair of Numbers to form the largest possible Number which can be formed

*/



int * maximize(int a[], int size)
{

	for(int i=0; i<size ; i++)
	{
		if((a[i] < a[i+1]) && (i%2==0))
		{
			int temp = a[i];
			a[i] = a[i+1];
			a[i+1] = temp;
		}

	}
		return a;

}


/*
Postional array reversal 
 linked list: 1 -> 2 -> 3-> 4-> 5-> 6 reverse the list each N nodes. eg. if N = 3 the output should 
 be 3-> 2-> 1-> 6-> 5-> 4. Also provide a mechanism to prevent errors. For the same example, if N = 4,
 the result should be: 4-> 3-> 2-> 1-> 5-> 6 (The last two nodes can't be reversed)
 */

class Llist{
				int data;
				llist *ptr;
public:
		Llist( )


};
void Link-revr-pos(int a[],int size)
{
	

}


int main()
{

	int a[6]= {1,1,4,2,3,4};
	
	//ascending_tripletes_all(a,6);
	//int *c = maximize(a,6);
	//int *c  = sort_Numbers(a,6);



	
	for(int i=0; i<4 ;i++)
	{
		cout<<c[i];
	}
	getch();

}
